/****************************************************************************
** Copyright (C) 2009 Мясников Алексей Сергеевич.
** Contact: AlekseyMyasnikov@yandex.ru
**          amyasnikov@npomis.ru
**          AlekseyMyasnikov@mail.ru
**          MyasnikovAleksey@mail.ru
** Этот файл является частью реализации библиотеки островного генетического
** алгоритма с динамическим распределением вероятностей выбора генетических
** операторов в каждой группе операторов
** Данная библиотека является свободным программным обеспечением. Вы вправе
** распространять её и/или модифицировать в соответствии с условиями версии 3
** либо по вашему выбору с условиями более поздней версии Стандартной
** Общественной Лицензии Ограниченного Применения GNU, опубликованной
** Free Software Foundation.
** Я распространяю эту библиотеку в надежде на то, что она будет вам
** полезной, однако НЕ ПРЕДОСТАВЛЯЮ НА НЕЕ НИКАКИХ ГАРАНТИЙ, в том числе
** ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ
** В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации ознакомьтесь
** со Стандартной Общественной Лицензией Ограниченного Применений GNU в
** файле LICENSE в корне исходных текстов проекта или по адресу:
** http://www.gnu.org/copyleft/lgpl.html.
****************************************************************************/
/**
 * @file    CChromosome.h
 * @brief   Файл содержит класс CChromosome,
 *          который является аналогом хромосомы
 *          в генетическом программировании
 * @date    20/02/2009
**/

#ifndef CCHROMOSOME_H_INCLUDED
#define CCHROMOSOME_H_INCLUDED

#include "export.h"
#include "../idl/Interface.h"
#include "../idl/IFitness.h"

namespace GeneticAlgorithm
{
    Q_DECL_EXPORT struct CChromosome : virtual public Interface
    {
        /**
         * @brief   Установить размер хромосомы
         *          Допускается только один раз за сеанс
         *          устанавливать размер хромосомы
         * @param   size - размер хромосомы
        **/
        static void setSize(unsigned int size);
        /**
         * @brief   Получить размер хромосомы
         * @return  Размер хромосомы
        **/
        static unsigned int size();
        /**
         * @brief   Установить указатель на целевую фунцию для расчета
         *          здоровья хромосомы.
         * @param   function - указатель на целевую функцию
        **/
        static void setFitnessFunction(IFitness* function);
        /**
         * @brief   Конструктор по умолчанию
         *          Хромосома инициализируется случайными значениями
        **/
        CChromosome(void);
        /**
         * @brief   Конструктор
         *          Хромосома инициализируется значениями def
         * @param   def - значение для инициализации хромосомы
        **/
        CChromosome(bool def);
        /**
         * @brief   Конструктор копирования
         *          Производится глубокое копирование данных
         * @param   chr - хромосома, из которой происходит
         *          конструирование текущей хромосомы
        **/
        CChromosome(const CChromosome& chr);
        /**
         * @brief   Оператор копирования
         *          Производится глубокое копирование данных
         * @param   chr - хромосома, из которой происходит
         *          конструирование текущей хромосомы
        **/
        CChromosome&operator=(const CChromosome& chr);
        /**
         * @brief   Деструктор
        **/
        ~CChromosome();
        /**
         * @brief   Метод открытия транзакции
         *          При открытых транзакциях расчет здоровья не производится
        **/
        void begin();
        /**
         * @brief   Метод закрытия транзакции
         *          При открытых транзакциях расчет здоровья не производится
        **/
        void commit();
        /**
         * @brief   Оператор сравнения двух хромосом
         * @param   chr - хромосома, с которой нужно сравнить
         * @return  true - если хромосомы равны
        **/
        bool operator ==(const CChromosome& chr) const;
        /**
         * @brief   Метод получения значения гена
         * @param   locus - позиция гена
         * @return  значение гена
        **/
        bool getGene(unsigned int locus) const;
        /**
         * @brief   Метод установления значения гена
         * @param   locus - позиция гена
         * @param   value - значение гена
        **/
        void setGene(unsigned int   locus,
                     bool           value);
        /**
         * @brief   Метод инвертирования значения гена
         * @param   locus - позиция гена
        **/
        void invertGene(unsigned int locus);
        /**
         * @brief   Метод получения значения здоровья хромосомы
         * @return  Здоровье хромосомы
        **/
        double fitness() const;
    private:
        static unsigned int m_bit_size;      ///<! Длина хромосомы
        static unsigned int m_byte_size;     ///<! Количество байт памяти для хрангения хромосомы
        static IFitness*    m_function;      ///<! Функция расчета здоровья хромосомы
        unsigned char*      m_data;          ///<! Хранилище данных в байт-представлении
        double              m_fitness;       ///<! Значение функции здоровья хромосомы
        int                 m_transactions;  ///<! Количество открытых транзакций
    };
};
#endif // CCHROMOSOME_H_INCLUDED
